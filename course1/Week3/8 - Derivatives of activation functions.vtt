WEBVTT

1
00 : 00 : 00.302 -> 00 : 00 : 04.340
Back propagation을 구현하기 위해서는,

2
00 : 00 : 04.340 -> 00 : 00 : 07.813
활성화 함수의 미분값, 기울기를
계산하지 않으면 안됩니다.

3
00 : 00 : 07.813 -> 00 : 00 : 11.333
활성화 함수에 따라서,

4
00 : 00 : 11.333 -> 00 : 00 : 14.025
그 기울기를 계산하는 방법을 배워 봅시다.

5
00 : 00 : 14.025 -> 00 : 00 : 17.239
이것이 익숙한 sigmoid 활성화 함수입니다.

6
00 : 00 : 17.239 -> 00 : 00 : 22.252
주어진 z에서

7
00 : 00 : 22.252 -> 00 : 00 : 27.184
이 함수는 거기에 대응 한 기울기,
즉 도함수를 가지고 있습니다.

8
00 : 00 : 27.184 -> 00 : 00 : 32.389
이 작은 삼각형의 폭에 대한 
높이 라고도 볼 수 있죠.

9
00 : 00 : 32.389 -> 00 : 00 : 39.823
g (z)가 sigmoid 함수인 경우,
그 기울기는 d / dz g (z)입니다.

10
00 : 00 : 39.823 -> 00 : 00 : 47.034
미적분학에서
이것이 g (x)의 z의 기울기라고 볼 수 있습니다.

11
00 : 00 : 47.034 -> 00 : 00 : 52.513
만약 당신이 미적분을 알고 있고,
미분 방법을 알 수 있다면,

12
00 : 00 : 52.513 -> 00 : 00 : 56.074
sigmoid 함수를 미분하면

13
00 : 00 : 56.074 -> 00 : 01 : 00.300
이 식이 된다는걸 알 수 있을 겁니다.

14
00 : 01 : 00.300 -> 00 : 01 : 02.380
물론 저는 미분 방법에
대해서 얘기하진 않을 겁니다.

15
00 : 01 : 02.380 -> 00 : 01 : 04.839
하지만 미적분에 익숙한 분이라면

16
00 : 01 : 04.839 -> 00 : 01 : 08.465
동영상을 멈추고 혼자서 
증명해 보는 것도 좋을 겁니다.

17
00 : 01 : 08.465 -> 00 : 01 : 16.583
이것은 g (z) × (1-g (z))와 동일합니다.

18
00 : 01 : 16.583 -> 00 : 01 : 20.923
이 식에 대해 자세히 살펴보겠습니다.

19
00 : 01 : 20.923 -> 00 : 01 : 26.343
첫째, z가 너무 큰 숫자,
예를 들어 10이라고 하면

20
00 : 01 : 26.343 -> 00 : 01 : 30.315
g (z)는 1에 가까워지고,

21
00 : 01 : 30.315 -> 00 : 01 : 38.758
이 왼쪽 식에서 d / dz g (z)는

22
00 : 01 : 38.758 -> 00 : 01 : 42.979
1 × (1-1)에서

23
00 : 01 : 42.979 -> 00 : 01 : 46.851
매우 0에 가까운 숫자가되는 것을 알 수 있습니다.

24
00 : 01 : 46.851 -> 00 : 01 : 51.267
이것은 올바른 결과라고 생각합니다.
z가 클 때 기울기는 0에 가까워지기 때문입니다.

25
00 : 01 : 51.267 -> 00 : 01 : 58.885
반대로, 만약 z가 -10 일 때,이 근처에서
g (z)는 0에 가깝습니다.

26
00 : 01 : 58.885 -> 00 : 02 : 01.765
왼쪽의 식에 따르면,

27
00 : 02 : 01.765 -> 00 : 02 : 07.333
d / dz g (z)는 0 × (1-0)에 가까운 값입니다.

28
00 : 02 : 07.333 -> 00 : 02 : 10.005
그래서 이것도 매우 0에 가까워지고,
정답입니다.

29
00 : 02 : 10.005 -> 00 : 02 : 16.889
마지막으로, z가 0 일 때, g (z)는 1/2입니다.

30
00 : 02 : 16.889 -> 00 : 02 : 18.983
sigmoid 함수의 이 부분 이네요.

31
00 : 02 : 18.983 -> 00 : 02 : 24.040
이 때, 도함수는

32
00 : 02 : 24.040 -> 00 : 02 : 28.459
1 / 2 × (1-1 / 2)에서 1 / 4입니다.

33
00 : 02 : 28.459 -> 00 : 02 : 33.135
정말, z = 0 일 때 도함수,
즉 이 함수의 기울기로

34
00 : 02 : 33.135 -> 00 : 02 : 35.831
올바른 값입니다.

35
00 : 02 : 35.831 -> 00 : 02 : 38.839
마지막으로 표기법을 하나 더
소개합니다.

36
00 : 02 : 38.839 -> 00 : 02 : 42.321
가끔 이것을 쓰는 대신,

37
00 : 02 : 42.321 -> 00 : 02 : 46.087
도함수를 간략화 한 g '(z)라고 쓰는 법을
사용합니다.

38
00 : 02 : 46.087 -> 00 : 02 : 52.167
위에있는 대시는 프라임이라고합니다.

39
00 : 02 : 52.167 -> 00 : 02 : 55.283
미적분학의 g '(z)는

40
00 : 02 : 55.283 -> 00 : 03 : 00.455
입력 변수 z에 대해 함수 g의 도함수를
단순화 된 구문입니다.

41
00 : 03 : 00.455 -> 00 : 03 : 07.513
신경망에서는 a = g (z) 라고 표현하고,

42
00 : 03 : 07.513 -> 00 : 03 : 11.351
그것은 이와 같습니다.

43
00 : 03 : 11.351 -> 00 : 03 : 17.145
그러면 이것은 a × (1-a)과 쓸 수 있습니다.

44
00 : 03 : 17.145 -> 00 : 03 : 20.109
가끔 구현할 때

45
00 : 03 : 20.109 -> 00 : 03 : 25.256
g '(z) = a (1-a)와 같이 쓰는 법을
보실 수도 있을 겁니다.

46
00 : 03 : 25.256 -> 00 : 03 : 29.040
그것은 도함수를 의미하는 g '가

47
00 : 03 : 29.040 -> 00 : 03 : 33.428
이와 같다는 것을
나타내고 있을 뿐입니다.

48
00 : 03 : 33.428 -> 00 : 03 : 38.397
이 공식의 장점은 a의 값을 계산하고 나면,

49
00 : 03 : 38.397 -> 00 : 03 : 43.078
이 식을 사용하여 기울기, 즉 g '값도

50
00 : 03 : 43.078 -> 00 : 03 : 45.038
바로 계산할 수 있다는 것입니다.

51
00 : 03 : 45.038 -> 00 : 03 : 47.632
여기까지가 sigmoid 활성화 함수였습니다.

52
00 : 03 : 47.632 -> 00 : 03 : 51.172
다음은 tanh 활성화 함수를 살펴 보겠습니다.

53
00 : 03 : 51.172 -> 00 : 03 : 56.311
이전과 같은 느낌으로, 

54
00 : 03 : 56.311 -> 00 : 04 : 01.155
 d / dz g (z)의 정의는 
z에서 g (z)의 기울기입니다.

55
00 : 04 : 01.155 -> 00 : 04 : 07.747
그리고 이 함수를 볼 때

56
00 : 04 : 07.747 -> 00 : 04 : 13.066
만약 미적분을 알고 있는 분이라면,

57
00 : 04 : 13.066 -> 00 : 04 : 17.359
미분이 이와 같이 간단한 식이 
된다는 것을 알고 있을 겁니다.

58
00 : 04 : 20.813 -> 00 : 04 : 23.997
이전처럼 단순화 표기로 쓰는 법을 사용하면,

59
00 : 04 : 23.997 -> 00 : 04 : 27.019
이것은 g '(z)로 나타낼 수 있습니다.

60
00 : 04 : 27.019 -> 00 : 04 : 30.941
이 식이 정확한지 아닌지 자세히 보겠습니다

61
00 : 04 : 30.941 -> 00 : 04 : 37.005
예를 들어 z = 10 일 때, tanh (z)는 1에 가까워집니다.

62
00 : 04 : 37.005 -> 00 : 04 : 41.309
이것은 +1에서 -1이됩니다.

63
00 : 04 : 41.309 -> 00 : 04 : 45.183
그리고 g '(z)는 이 식에 의하면,

64
00 : 04 : 45.183 -> 00 : 04 : 48.148
1-1 ^ 1, 즉 0이됩니다.

65
00 : 04 : 48.148 -> 00 : 04 : 53.930
즉, z가 너무 크면 기울기는 0에 가까워지는
것입니다.

66
00 : 04 : 53.930 -> 00 : 04 : 58.760
반대로, z가 작은 숫자, 예를 들면 -10이라면,

67
00 : 04 : 58.760 -> 00 : 05 : 02.440
tanh (z)는 -1에 가까워지고 있습니다.

68
00 : 05 : 02.440 -> 00 : 05 : 07.871
그러자 g '(z)는 1 - (- 1) ^ 2이되므로,

69
00 : 05 : 07.871 -> 00 : 05 : 12.792
1-1에 가까워지고, 이쪽도 0에 가깝습니다.

70
00 : 05 : 12.792 -> 00 : 05 : 18.421
마지막으로, z = 0이면, tanh (z) = 0이되고,

71
00 : 05 : 18.421 -> 00 : 05 : 22.165
기울기는 1이됩니다.

72
00 : 05 : 22.165 -> 00 : 05 : 26.433
실제로 z = 0 일 때의 기울기는 1이되고 있습니다.

73
00 : 05 : 26.433 -> 00 : 05 : 33.001
요약하면,
a = g (z) 즉 a가 tanh (z)와 같을 때,

74
00 : 05 : 33.001 -> 00 : 05 : 38.300
미분 한 g '(z)는 1-a ^ 2입니다.

75
00 : 05 : 38.300 -> 00 : 05 : 42.000
다시 말하지만,
만약 a의 값을 계산 해놨다면,

76
00 : 05 : 42.000 -> 00 : 05 : 46.522
이 공식을 사용하여
미분 값도 빠르게 계산할 수 있습니다.

77
00 : 05 : 46.522 -> 00 : 05 : 49.618
마지막으로, ReLU과 Leaky ReLU 활성화 함수

78
00 : 05 : 49.618 -> 00 : 05 : 51.338
미분을 계산하는 방법입니다.

79
00 : 05 : 51.338 -> 00 : 05 : 57.866
ReLU에서는 g (z) = max (0, z)입니다.

80
00 : 05 : 57.866 -> 00 : 06 : 03.330
그래서, z는 0보다 작은 경우,
미분 값은 0입니다.

81
00 : 06 : 03.330 -> 00 : 06 : 09.066
z가 0보다 큰 경우는 1이됩니다.

82
00 : 06 : 09.066 -> 00 : 06 : 15.498
사실 엄밀히 말하면 z는 0일 경우에
미분 값은 정의 할 수 없습니다.

83
00 : 06 : 15.498 -> 00 : 06 : 18.339
그래서 소프트웨어에서 이를 구현할 때

84
00 : 06 : 18.339 -> 00 : 06 : 21.398
수학적으로는 완벽하지 않을지도 모릅니다.

85
00 : 06 : 21.398 -> 00 : 06 : 25.571
그러나 z는 0일 경우 그냥

86
00 : 06 : 25.571 -> 00 : 06 : 30.501
미분을 1 또는 0으로 설정해도 문제는 없을 것입니다.

87
00 : 06 : 30.501 -> 00 : 06 : 31.781
걱정할 필요는 없습니다.

88
00 : 06 : 31.781 -> 00 : 06 : 33.578
여러분이 이를 고려해야만 하는 정교한 
전문적인 최적화 작업을 한다면,

89
00 : 06 : 33.578 -> 00 : 06 : 37.109
g '(z)는 실제로
g (z)의 sub gradient가 되어서,

90
00 : 06 : 37.109 -> 00 : 06 : 41.360
경사 하강 법이 제대로 작동합니다.

91
00 : 06 : 41.360 -> 00 : 06 : 47.327
그러나 z는 딱 0.00000 ...가 될 가능성은
아주 작기 때문에,

92
00 : 06 : 47.327 -> 00 : 06 : 52.805
z = 0 일 때의 미분을 둘 중에 무엇으로든지
정의하는 것은

93
00 : 06 : 52.805 -> 00 : 06 : 54.303
별로 문제가되지 않습니다.

94
00 : 06 : 54.303 -> 00 : 06 : 59.155
이것이 실제로 미분을 구현하는 방법입니다.

95
00 : 06 : 59.155 -> 00 : 07 : 03.712
마지막으로, Leaky ReLU 활성화 함수로

96
00 : 07 : 03.712 -> 00 : 07 : 06.882
신경망을 훈련 할 때

97
00 : 07 : 06.882 -> 00 : 07 : 12.244
g (z)는 0.01z와 z 중 큰 값을 취합니다.

98
00 : 07 : 12.244 -> 00 : 07 : 16.247
그래서, z는 0보다 작은 경우
g '(z)는 0.01이되고,

99
00 : 07 : 16.247 -> 00 : 07 : 20.074
z는 0보다 큰 경우 1입니다.

100
00 : 07 : 20.074 -> 00 : 07 : 22.477
다시 말하지만,

101
00 : 07 : 22.477 -> 00 : 07 : 27.403
z 다만 0 일 때,
엄밀히 말하면 기울기는 정의되지 않습니다.

102
00 : 07 : 27.403 -> 00 : 07 : 33.479
그러나 구현할 때, z = 0 일 때

103
00 : 07 : 33.479 -> 00 : 07 : 38.353
g '(z)을 0.01 또는 1 어느것으로 설정해도
문제 없습니다.

104
00 : 07 : 38.353 -> 00 : 07 : 41.499
어디라도 코드는 제대로 움직입니다.

105
00 : 07 : 41.499 -> 00 : 07 : 45.594
이제 공식들을 사용하여
활성화 함수의 기울기, 즉 미분을

106
00 : 07 : 45.594 -> 00 : 07 : 48.400
계산할 수 있게 되었습니다.

107
00 : 07 : 48.400 -> 00 : 07 : 50.553
이제 이 공식들을 이용해서

108
00 : 07 : 50.553 -> 00 : 07 : 54.502
신경망의 경사 하강 법을
구현하는 방법을 배워 봅시다.

109
00 : 07 : 54.502 -> 00 : 07 : 57.309
다음 동영상으로 이동합시다.