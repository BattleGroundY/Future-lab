WEBVTT

1
00 : 00 : 01.050 -> 00 : 00 : 03.840
딥러닝이라는 용어는
신경망을 학습시키는 것을 의미합니다

2
00 : 00 : 03.840 -> 00 : 00 : 06.050
이 신경망은 때로는 매우 클 수도 있습니다.
3
00 : 00 : 06.050 -> 00 : 00 : 08.400
그래서 신경망 이라는 것이 정확히 무엇 일까요?

4
00 : 00 : 08.400 -> 00 : 00 : 11.340
이 영상에서는, 당신에게 기초적인
통찰력을 드리려고 합니다.

5
00 : 00 : 12.850 -> 00 : 00 : 16.540
주택가격을 예측 하는 예시를 보도록 하죠.

6
00 : 00 : 16.540 -> 00 : 00 : 20.599
당신이 6개의 집들에 관한 데이터 셋을
가지고 있다고 해봅시다.

7
00 : 00 : 20.599 -> 00 : 00 : 24.478
당신은 집의 크기와 가격에 대한 정보를
알고 있습니다.

8
00 : 00 : 24.478 -> 00 : 00 : 28.501
그리고 당신은 크기에 대한 함수를 이용해서
가격을 예측하는 함수를 구하고 싶어합니다.

9
00 : 00 : 28.501 -> 00 : 00 : 33.509
당신이 선형회귀에 친숙하다면
이 데이터에

10
00 : 00 : 33.509 -> 00 : 00 : 38.450
이러한 직선을 그어 보도록 합시다.

11
00 : 00 : 38.450 -> 00 : 00 : 41.850
Pathans(Path analysis)를 적용해보면
당신은 가격들이 절대 음수가 되지 않는다는 걸

12
00 : 00 : 41.850 -> 00 : 00 : 43.770
알 수 있습니다.

13
00 : 00 : 43.770 -> 00 : 00 : 48.050
이 직선을 음수 부분까지 뻗게 놔두지 말고

14
00 : 00 : 48.050 -> 00 : 00 : 49.960
여기에서 구부려 봅시다.

15
00 : 00 : 49.960 -> 00 : 00 : 51.530
여기서는 0이 되겠죠.

16
00 : 00 : 51.530 -> 00 : 00 : 56.770
결국 이 두꺼운 파란색 선이
크기에 따라 주택가격을 예측하는

17
00 : 00 : 56.770 -> 00 : 00 : 59.760
함수가 될 것입니다.

18
00 : 00 : 59.760 -> 00 : 01 : 03.310
여기에서는 0이고 오른쪽으로 뻗어가는 직선이군요.

19
00 : 01 : 04.408 -> 00 : 01 : 08.735
당신은 이 주택가격에 적용한 함수를
매우 간단한

20
00 : 01 : 08.735 -> 00 : 01 : 11.880
신경망 이라고 생각해도 됩니다.

21
00 : 01 : 11.880 -> 00 : 01 : 14.230
정말 매우 간단한 신경망 입니다.

22
00 : 01 : 14.230 -> 00 : 01 : 15.000
여기에 한번 써보죠.

23
00 : 01 : 17.220 -> 00 : 01 : 22.170
신경망의 입력값으로서
X값인 주택의 크기가 있습니다.

24
00 : 01 : 22.170 -> 00 : 01 : 26.791
이 X값은 원형으로 표시 한 이 노드에
들어갑니다

25
00 : 01 : 26.791 -> 00 : 01 : 30.940
그리고 Y값인 가격을 출력합니다

26
00 : 01 : 30.940 -> 00 : 01 : 37.183
이 작은 동그라미는
신경망의 작은 신경입니다

27
00 : 01 : 37.183 -> 00 : 01 : 41.830
그리고 이 동그라미는 왼쪽에 그린 함수를
구현하고 있습니다

28
00 : 01 : 43.350 -> 00 : 01 : 48.940
모든 뉴런들은 크기를 입력하고
선형함수를 계산하고,

29
00 : 01 : 48.940 -> 00 : 01 : 51.960
최대값을 0으로 취한 후에, 
추정 가격을 출력하고 있을 뿐입니다.

30
00 : 01 : 53.190 -> 00 : 01 : 58.230
그런데 신경망 분야에서
당신은 이 함수를 많이 볼 것입니다.

31
00 : 01 : 58.230 -> 00 : 02 : 00.992
이 함수는 0에서 머무르다가

32
00 : 02 : 00.992 -> 00 : 02 : 03.550
직선 형태로 올라갑니다.

33
00 : 02 : 03.550 -> 00 : 02 : 09.108
이 함수들은 ReLU라고 부르고

34
00 : 02 : 09.108 -> 00 : 02 : 17.620
이는 다듬어진 선형단위들을 의미합니다.

35
00 : 02 : 17.620 -> 00 : 02 : 18.252
RELU 입니다.

36
00 : 02 : 18.252 -> 00 : 02 : 22.520
다듬는다는 것은 최대값을 0으로 취하는 것을 의미합니다.
따라서 이런 함수 형태가 됩니다.

37
00 : 02 : 23.640 -> 00 : 02 : 25.550
ReLU 부분은 지금은 걱정하지 마십시오

38
00 : 02 : 25.550 -> 00 : 02 : 30.200
이 코스에서 추후에 다시 만나게 될 것입니다.

39
00 : 02 : 30.200 -> 00 : 02 : 33.790
그래서 이것을 하나의 뉴런,

40
00 : 02 : 33.790 -> 00 : 02 : 38.870
정말 작은 신경망이라고 한다면,
더 큰 신경망은

41
00 : 02 : 38.870 -> 00 : 02 : 44.520
하나 하나의 작은 신경망을
쌓아 올린 형태가 될 것입니다.

42
00 : 02 : 44.520 -> 00 : 02 : 50.700
이 뉴런을 1 개의 레고 블록으로 생각하면

43
00 : 02 : 50.700 -> 00 : 02 : 55.270
많은 블록을 겹쳐 쌓는 경우
더 큰 신경망을 만들 수 있습니다.

44
00 : 02 : 55.270 -> 00 : 02 : 56.110
예를 들어 봅시다.

45
00 : 02 : 57.260 -> 00 : 03 : 02.220
예를 들어 크기로만 
주택가격을 예측하는 것이 아니라

46
00 : 03 : 02.220 -> 00 : 03 : 04.330
당신이 다른 요소들을 알고 있다고 해봅시다.

47
00 : 03 : 04.330 -> 00 : 03 : 08.164
예를 들어 침실의 개수가 될 수 있겠군요,
48
00 : 03 : 08.164 -> 00 : 03 : 13.630
그리고 주택 가격을 결정하는 데 또 다른
중요한 요소는

49
00 : 03 : 13.630 -> 00 : 03 : 18.820
그 집에 살 수있는 
가족의 인원수 일 것입니다. 맞나요?

50
00 : 03 : 18.820 -> 00 : 03 : 21.882
주택에 3 명, 4 명
5 명 등으로 가족들이 살 수 있습니다

51
00 : 03 : 21.882 -> 00 : 03 : 22.687
맞죠?

52
00 : 03 : 22.687 -> 00 : 03 : 26.351
평방 미터 등의 넓이와
침실 수 야말로

53
00 : 03 : 26.351 -> 00 : 03 : 28.960
당신의 가족 모두가

54
00 : 03 : 28.960 -> 00 : 03 : 31.462
그 주택에 거주 할 수 있을지 없을 지를
결정합니다.

55
00 : 03 : 31.462 -> 00 : 03 : 34.909
그 외에도 ZIP 코드가 있습니다

56
00 : 03 : 34.909 -> 00 : 03 : 40.520
일부 국가에서는 우편 번호라고되어 있습니다

57
00 : 03 : 40.520 -> 00 : 03 : 48.820
ZIP 코드에 의해 걸어 다닐 정도로 접근성이
좋은지를 알 수 있습니다.

58
00 : 03 : 48.820 -> 00 : 03 : 51.434
걸어서 다닐 정도로 접근성이 좋은 지역인가?

59
00 : 03 : 51.434 -> 00 : 03 : 53.635
식료품 가게와 학교까지 걸어 갈

60
00 : 03 : 53.635 -> 00 : 03 : 54.194
수 있는지?

61
00 : 03 : 54.194 -> 00 : 03 : 55.250
운전을 해서 가야 하는지?

62
00 : 03 : 55.250 -> 00 : 03 : 57.870
이처럼 걸어다닐 수 있는 지역을 선호하는
사람들도 있습니다.

63
00 : 03 : 57.870 -> 00 : 04 : 06.145
그리고 ZIP code 뿐만 아니라 그 지역의 부유함 또한
가격을 결정하는 요소일 수 있습니다.

64
00 : 04 : 06.145 -> 00 : 04 : 09.200
미국이 특히 그렇고 다른 나라에서도 비슷할 겁니다.

65
00 : 04 : 09.200 -> 00 : 04 : 13.590
부유함의 정도는 학교의 수준을 말해줍니다.

66
00 : 04 : 13.590 -> 00 : 04 : 17.820
제가 그린 이 작은 동그라미는 각각
다듬어진 선형 단위나 비선형 함수인

67
00 : 04 : 17.820 -> 00 : 04 : 22.670
ReLU가 될 수 있습니다.

68
00 : 04 : 22.670 -> 00 : 04 : 24.936
정리하면 크기와 침실의 수를 통해
가족의 수를 추정할 수 있고,

69
00 : 04 : 24.936 -> 00 : 04 : 28.420
ZIP 코드를 통해 걸어다닐 수 있는 접근성을
알 수 있고

70
00 : 04 : 28.420 -> 00 : 04 : 32.050
ZIP 코드와 부유함을 통해
학교의 수준을 추정할 수 있습니다.

71
00 : 04 : 32.050 -> 00 : 04 : 35.660
그리고 당신은 사람들이 주택에 
얼마까지 지불 할 것인가는

72
00 : 04 : 35.660 -> 00 : 04 : 38.880
사람들이 정말 중요하다고 생각하는 요소에 의해
정해진다고 생각할 것입니다

73
00 : 04 : 38.880 -> 00 : 04 : 43.060
이 경우에는 가족의 인원수, 걸어다닐수 있는지 여부, 학교의 수준이

74
00 : 04 : 43.060 -> 00 : 04 : 45.210
가격을 예측하는데 쓰이는 중요한 요소가 될 것입니다.

75
00 : 04 : 46.330 -> 00 : 04 : 51.740
이 예에서 X는 이와 같은 4 개의 입력값 이고

76
00 : 04 : 53.470 -> 00 : 04 : 56.460
Y는 예측하고자하는 가격입니다

77
00 : 04 : 57.960 -> 00 : 05 : 03.350
먼저 이전 슬라이드에서 가져온 뉴런들 또는
간단한 예측도구(인원 수, 학교 수준)들을 쌓아서

78
00 : 05 : 03.350 -> 00 : 05 : 07.360
약간 큰 신경망을 만들게 됬습니다.

79
00 : 05 : 07.360 -> 00 : 05 : 10.850
당신이 신경망을 다루는 방법은,
당신이 그것을 실행 시키고자 한다면

80
00 : 05 : 10.850 -> 00 : 05 : 15.860
수많은 입력값 X와 출력값Y의 
훈련용 데이터들을

81
00 : 05 : 15.860 -> 00 : 05 : 20.740
컴퓨터에 넣어주면 됩니다

82
00 : 05 : 20.740 -> 00 : 05 : 23.580
중간값 들은
컴퓨터 스스로 결정할 겁니다.

83
00 : 05 : 25.435 -> 00 : 05 : 29.225
실제로 구현하는 것은 이것입니다

84
00 : 05 : 29.225 -> 00 : 05 : 32.055
여기에 4 개의 입력값을 가진
신경망이 있습니다

85
00 : 05 : 32.055 -> 00 : 05 : 35.455
입력값의 종류는 크기, 침실의 수,

86
00 : 05 : 35.455 -> 00 : 05 : 40.365
우편 번호, 지역의 부유함입니다

87
00 : 05 : 40.365 -> 00 : 05 : 44.805
이러한 입력값 들을주고

88
00 : 05 : 44.805 -> 00 : 05 : 50.200
신경망 일은
가격 Y를 예측하는 것입니다

89
00 : 05 : 50.200 -> 00 : 05 : 55.942
여기를 잘 보세요
이 부분 작은 원형의 신경망은

90
00 : 05 : 55.942 -> 00 : 06 : 02.310
신경망에서 숨겨진 단위라고 불리는 부분입니다.
이 부분은 4종류의 입력값 종류들을 모두 취합니다.

91
00 : 06 : 02.310 -> 00 : 06 : 08.139
예를 들어 이 첫 번째 노드는 X1과 X2의 요소만으로

92
00 : 06 : 08.139 -> 00 : 06 : 12.056
가족의 수 만을 나타낸다는 것이 아니라

93
00 : 06 : 12.056 -> 00 : 06 : 15.302
신경망에서 노드들은
94
00 : 06 : 15.302 -> 00 : 06 : 18.200
자신이 대표값을 스스로 결정하게됩니다(?)

95
00 : 06 : 18.200 -> 00 : 06 : 21.070
따라서 4 개의 입력 요소들을 모두 전달하여
자유롭게 계산합니다

96
00 : 06 : 21.070 -> 00 : 06 : 26.170
그래서 우리는 신경망의
입력 층과 중간 층이

97
00 : 06 : 26.170 -> 00 : 06 : 28.960
조밀하게 연결되어 있다고 얘기합니다

98
00 : 06 : 28.960 -> 00 : 06 : 31.740
모든 입력 요소들은 중간의 모든 원형에

99
00 : 06 : 31.740 -> 00 : 06 : 33.980
연결되어 있기 때문입니다

100
00 : 06 : 33.980 -> 00 : 06 : 38.630
신경망의 놀라운 점은
X와 Y에 대한 충분한 데이터를주고

101
00 : 06 : 38.630 -> 00 : 06 : 43.290
X와 Y로 이루어진 충분한 양의 훈련용 데이터를 주면

102
00 : 06 : 43.290 -> 00 : 06 : 47.450
X에서 Y를 산출하는 함수를 정확하게
아주 잘 찾습니다

103
00 : 06 : 48.990 -> 00 : 06 : 51.680
이것이 신경망의 기본입니다

104
00 : 06 : 51.680 -> 00 : 06 : 54.290
당신이 스스로 신경망을 설계 하다보면

105
00 : 06 : 54.290 -> 00 : 06 : 57.130
Supervised learning에서 가장 편리하고
강력한 것으로 아마 느끼셨을 겁니다.

106
00 : 06 : 57.130 -> 00 : 07 : 01.620
이는 당신이 입력 X를 사용하여 출력 Y를 
얻어내려고 했다는 것을 의미하죠

107
00 : 07 : 01.620 -> 00 : 07 : 06.980
주택 가격 예측의 예에서 보았 듯이 말입니다

108
00 : 07 : 06.980 -> 00 : 07 : 11.490
다음 비디오에서는
SUpervised learning의 다른 예들을 더 살펴보기로 하죠.

109
00 : 07 : 11.490 -> 00 : 07 : 15.670
이 예제에서 만들 신경망은
당신의 application에 엄청난 도움이 될지도

110
00 : 07 : 15.670 -> 00 : 07 : 16.670
모릅니다