WEBVTT

1
00 : 00 : 00.676 -> 00 : 00 : 04.870
이전 비디오에서
내장 함수를 사용하여

2
00 : 00 : 04.870 -> 00 : 00 : 08.140
for loop를 사용하지 않고,
벡터화하여

3
00 : 00 : 08.140 -> 00 : 00 : 11.210
코드를 꽤 고속화 할 수있는 예를
보고 왔습니다

4
00 : 00 : 11.210 -> 00 : 00 : 12.870
좀 더 예를 살펴 보겠습니다.

5
00 : 00 : 13.960 -> 00 : 00 : 17.898
당신이 신경망을 프로그램 할 때 
 
6
00 : 00 : 17.898 -> 00 : 00 : 20.061
또는 로지스틱 회귀를 프로그램 할 때
기억해야 할 교훈은

7
00 : 00 : 20.061 -> 00 : 00 : 22.341
가능한 한 for loop을 피하는 것입니다

8
00 : 00 : 22.341 -> 00 : 00 : 27.337
for loop를 피하는 것이
항상 가능한 것은 아니지만

9
00 : 00 : 27.337 -> 00 : 00 : 32.580
내장 함수를 사용 한다거나
가능한 다른 계산 방법을 찾으면

10
00 : 00 : 32.580 -> 00 : 00 : 37.120
for loop를 사용하는 것보다
대개는 빨라집니다

11
00 : 00 : 37.120 -> 00 : 00 : 38.640
다른 예를 한번 살펴보도록 하죠.

12
00 : 00 : 38.640 -> 00 : 00 : 45.227
벡터 u를 행렬 A와 벡터 V의

13
00 : 00 : 45.227 -> 00 : 00 : 50.757
곱하기로 정의 한다면,

14
00 : 00 : 50.757 -> 00 : 00 : 56.659
ui는 j항 부터 합계(시그마) 한
Aij와 Vj의 곱입니다

15
00 : 00 : 56.659 -> 00 : 00 : 58.406
이렇게 ui 식을 만듭니다

16
00 : 00 : 58.406 -> 00 : 01 : 03.851
이것을 벡터화하지 않는 방법으로
구현하면

17
00 : 01 : 03.851 -> 00 : 01 : 09.750
u = np.zeros ((n, 1))로

18
00 : 01 : 09.750 -> 00 : 01 : 12.280
for i....

19
00 : 01 : 12.280 -> 00 : 01 : 15.600
for j.....

20
00 : 01 : 16.670 -> 00 : 01 : 23.050
그리고 u [i + = A [i] [j] * v [j]입니다

21
00 : 01 : 23.050 -> 00 : 01 : 26.971
여기에는 i와 j를
반복하는 2 번의 for 루프가 있습니다

22
00 : 01 : 26.971 -> 00 : 01 : 30.864
이것이 벡터화하지 않는 코드였고,

23
00 : 01 : 30.864 -> 00 : 01 : 37.467
벡터화하는 코드는
u = np.dot (A, v)입니다

24
00 : 01 : 37.467 -> 00 : 01 : 40.726
오른쪽의 벡터화 버전의 구현

25
00 : 01 : 40.726 -> 00 : 01 : 45.040
2 개의 for loop을 제거 했기 때문에
꽤 빠른 것입니다

26
00 : 01 : 45.040 -> 00 : 01 : 46.790
또 다른 예를 살펴 보겠습니다.

27
00 : 01 : 46.790 -> 00 : 01 : 50.720
벡터 v가 이미 메모리 안에 있다고합니다

28
00 : 01 : 50.720 -> 00 : 01 : 55.420
벡터 v의 모든 값에
지수 연산을 수행하려고합니다

29
00 : 01 : 55.420 -> 00 : 02 : 00.370
u는 벡터 v1의 지수 함수 e

30
00 : 02 : 00.370 -> 00 : 02 : 05.700
v2 지수 함수 e에서
vn 지수 함수 e까지 계속됩니다

31
00 : 02 : 05.700 -> 00 : 02 : 09.390
벡터화하지 않은 코드는 이렇게 될겁니다.

32
00 : 02 : 09.390 -> 00 : 02 : 13.342
먼저 u벡터를 0으로 초기화 합니다.

33
00 : 02 : 13.342 -> 00 : 02 : 18.350
다음 for loop를 사용하여
벡터 값들을 하나씩 계산합니다

34
00 : 02 : 18.350 -> 00 : 02 : 23.890
Python과 numpy의
많은 내장 함수는

35
00 : 02 : 23.890 -> 00 : 02 : 31.270
하나의 함수를 한 번 호출하는 것으로
벡터를 계산할 수 있습니다

36
00 : 02 : 31.270 -> 00 : 02 : 34.720
이 때문에 나라면
이와 같이 구현할 겁니다.

37
00 : 02 : 36.500 -> 00 : 02 : 41.640
import numpy as np와

38
00 : 02 : 41.640 -> 00 : 02 : 47.250
u = np.exp (v)를 호출할 겁니다.

39
00 : 02 : 47.250 -> 00 : 02 : 52.029
따라서 앞의 예에서는
for loop를 썼지 만

40
00 : 02 : 52.029 -> 00 : 02 : 56.879
여기에있는 단 한 줄의 코드는
v를 입력 벡터로 지정하고 u를 출력 벡터로 지정했습니다

41
00 : 02 : 56.879 -> 00 : 03 : 01.438
그 결과 for loop 부분을 제거했습니다

42
00 : 03 : 01.438 -> 00 : 03 : 06.030
오른쪽의 구현 쪽이 for loop를 필요로하는 구현보다
훨씬 빠를겁니다.

43
00 : 03 : 06.030 -> 00 : 03 : 10.360
사실 numpy 라이브러리 안에는
그 밖에도 많은 벡터 함수가 있습니다

44
00 : 03 : 10.360 -> 00 : 03 : 16.124
np.log (v)는
행렬값 들의  log연산을 실행합니다

45
00 : 03 : 16.124 -> 00 : 03 : 20.260
np.abs은
행렬값 들의 절대 값을 계산하고

46
00 : 03 : 20.260 -> 00 : 03 : 25.525
np.maximum은
행렬값 들의 최댓값을 계산합니다

47
00 : 03 : 25.525 -> 00 : 03 : 30.207
v의 각 요소에 대해
0 이상의 최대 값을 표시합니다

48
00 : 03 : 30.207 -> 00 : 03 : 36.230
v ** 2에서는 행렬 연산에 대해
v의 제곱을 내고 있습니다

49
00 : 03 : 36.230 -> 00 : 03 : 42.950
1 / v는 행렬 값의 역수를
계산합니다

50
00 : 03 : 42.950 -> 00 : 03 : 47.390
그래서 for loop를 쓰고 싶을 때는

51
00 : 03 : 47.390 -> 00 : 03 : 52.022
for loop없이 numpy 내장 함수를 활용해서 
할 수 있는지 항상 확인합시다.

52
00 : 03 : 53.200 -> 00 : 03 : 55.387
이 학습 한 것을 사용하여

53
00 : 03 : 55.387 -> 00 : 03 : 59.036
로지스틱 회귀 경사 강하 법의 구현에
적용해 보겠습니다.

54
00 : 03 : 59.036 -> 00 : 04 : 03.240
for loop를 1개나 2개 라도
제거할 수 있을지 해 봅시다

55
00 : 04 : 03.240 -> 00 : 04 : 04.310
이 코드가

56
00 : 04 : 04.310 -> 00 : 04 : 09.350
로지스틱 회귀의 미분을 계산하는 코드입니다.
그리고 여기는 2 개의 for loop 있습니다

57
00 : 04 : 09.350 -> 00 : 04 : 12.430
첫 번째는 여기,
두 번째는 여기입니다

58
00 : 04 : 12.430 -> 00 : 04 : 15.736
이 예에서는
nx = 2이지만

59
00 : 04 : 15.736 -> 00 : 04 : 20.406
만약 3 이상의 feature가
있었다고하면

60
00 : 04 : 20.406 -> 00 : 04 : 25.194
for loop를 사용하여
dw1, dw2, dw3 까지 계산해야합니다

61
00 : 04 : 25.194 -> 00 : 04 : 31.397
실제로 for j = 1 .... nx처럼
for문을 추가해서 쓰고,

62
00 : 04 : 31.397 -> 00 : 04 : 37.490
그리고 dwj까지 업데이트 해야될 겁니다.

63
00 : 04 : 37.490 -> 00 : 04 : 41.850
그런데 우리는 이 두 번째 for loop를
제거하고 싶습니다

64
00 : 04 : 41.850 -> 00 : 04 : 43.940
이 슬라이드에서 한번 해보겠습니다.

65
00 : 04 : 43.940 -> 00 : 04 : 49.214
이 방식은
dw1, dw2을

66
00 : 04 : 49.214 -> 00 : 04 : 54.120
각각 0으로 초기화하는 코드를
직접 쓰는 것이 아니라

67
00 : 04 : 54.120 -> 00 : 05 : 00.267
이 구문을 제거해 버리고
dw을 벡터화 합니다

68
00 : 05 : 00.267 -> 00 : 05 : 04.884
dw = np.zeros ((n_x , 1))로 쓰고

69
00 : 05 : 04.884 -> 00 : 05 : 10.000
이 같은 차원을 가지는 벡터로 만듭니다.

70
00 : 05 : 11.020 -> 00 : 05 : 14.527
이 부분에 대해

71
00 : 05 : 14.527 -> 00 : 05 : 18.663
여기 있는 loop 대신에

72
00 : 05 : 18.663 -> 00 : 05 : 23.551
이 벡터 연산 명령을 사용합니다

73
00 : 05 : 23.551 -> 00 : 05 : 27.080
dw += x (i) 곱하기 dz (i);
라고 쓰겠습니다.

74
00 : 05 : 27.080 -> 00 : 05 : 33.017
그리고 마지막으로
이것 대신에

75
00 : 05 : 33.017 -> 00 : 05 : 39.160
dw / = m로 씁니다

76
00 : 05 : 39.160 -> 00 : 05 : 42.540
이와 같이 2 개의 for loop에서
1개의 for loop로 바꿨습니다.

77
00 : 05 : 42.540 -> 00 : 05 : 47.270
아직 이 for loop가 위에 남아 있긴 합니다.

78
00 : 05 : 49.180 -> 00 : 05 : 52.190
이 영상으로
벡터화를 이해 하셨으면 좋겠습니다.

79
00 : 05 : 52.190 -> 00 : 05 : 56.442
하나의 for loop를 제거함으로써
코드는 빨리 작동합니다

80
00 : 05 : 56.442 -> 00 : 05 : 58.370
하지만 더 빨라질 수 있습니다

81
00 : 05 : 58.370 -> 00 : 06 : 02.432
다음 비디오에서는 로지스틱 회귀를 
더욱 더 제대로 벡터화하는 방법을 말해보겠습니다.

82
00 : 06 : 02.432 -> 00 : 06 : 03.420
충격적일 정도로

83
00 : 06 : 03.420 -> 00 : 06 : 07.430
꽤 놀라운 결과를 볼 수 있습니다

84
00 : 06 : 07.430 -> 00 : 06 : 10.890
for loop를 하나도 사용하지 않고, 
여기 있던 맨 위의 for loop도 사용하지 않고

85
00 : 06 : 10.890 -> 00 : 06 : 14.850
전체 학습 데이터를 처리하는 코드를
쓰게 될겁니다.

86
00 : 06 : 14.850 -> 00 : 06 : 17.170
언제든지 동일한 방식으로
사용할 수 있습니다

87
00 : 06 : 17.170 -> 00 : 06 : 18.880
다음 비디오로 넘어가 봅시다.