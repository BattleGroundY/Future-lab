WEBVTT

1
00 : 00 : 00.000 -> 00 : 00 : 03.000
여러분의 신경망의 계산 방식이
다음과 같이 구성된 다는 것을 들어 보셨을 겁니다.

2
00 : 00 : 03.000 -> 00 : 00 : 07.253
신경망의 출력 값을 계산하는

3
00 : 00 : 07.253 -> 00 : 00 : 10.005
forward pass 또는 forward propagation step의 선행 단계

4
00 : 00 : 10.005 -> 00 : 00 : 13.310
기울기와 미분 등을 계산하는

5
00 : 00 : 13.310 -> 00 : 00 : 16.137
backward pass 또는 back propagation step의 후속 단계로 말이죠.

6
00 : 00 : 16.137 -> 00 : 00 : 21.540
계산 그래프를 이용하여
왜 이렇게 구성되어 있는지를 설명 할 수 있을겁니다.

7
00 : 00 : 21.540 -> 00 : 00 : 24.375
이 비디오에서 예를 보겠습니다

8
00 : 00 : 24.375 -> 00 : 00 : 28.060
계산 그래프를 설명하기 위해

9
00 : 00 : 28.060 -> 00 : 00 : 34.260
로지스틱 회귀나 완벽한 신경망보다
간단한 예제를 사용합시다

10
00 : 00 : 34.260 -> 00 : 00 : 37.200
함수 J를 계산 하려고 하고 있다고 합시다

11
00 : 00 : 37.200 -> 00 : 00 : 39.510
3 개의 인수 a, b, c를 가지고
있는 함수입니다

12
00 : 00 : 39.510 -> 00 : 00 : 44.900
그리고 함수 J는 3(a + bc) 라고 합시다

13
00 : 00 : 44.900 -> 00 : 00 : 49.260
이를 계산하려면
3 개의 독특한 단계가 있습니다

14
00 : 00 : 49.260 -> 00 : 00 : 51.799
먼저 bc의 값이 뭔지를 계산하고,

15
00 : 00 : 51.799 -> 00 : 00 : 55.195
이것을 변수 u에 담아 놓읍시다.

16
00 : 00 : 55.195 -> 00 : 00 : 59.117
u = b * c입니다

17
00 : 00 : 59.117 -> 00 : 01 : 06.060
V = a + u입니다

18
00 : 01 : 06.060 -> 00 : 01 : 09.380
결국 출력 J는 3V입니다

19
00 : 01 : 09.380 -> 00 : 01 : 15.555
계산하려고하는 최종 함수 J는
3V가 됩니다

20
00 : 01 : 15.555 -> 00 : 01 : 20.970
이 3 단계를 계산 그래프에서
다음과 같이 그릴 수 있습니다

21
00 : 01 : 20.970 -> 00 : 01 : 26.400
3 개의 변수 a, b, c를 여기에 씁니다

22
00 : 01 : 26.400 -> 00 : 01 : 31.825
먼저 계산하는 것은 u = bc 였습니다

23
00 : 01 : 31.825 -> 00 : 01 : 35.015
이 사각형 안에 넣어 놓겠습니다.

24
00 : 01 : 35.015 -> 00 : 01 : 39.030
이것의 입력 값은 b와 c입니다

25
00 : 01 : 39.030 -> 00 : 01 : 41.505
그리고 V = a + u도있을 것입니다

26
00 : 01 : 41.505 -> 00 : 01 : 47.440
이것의 입력 값은

27
00 : 01 : 47.440 -> 00 : 01 : 56.645
계산 한 u와 함께 a를 넣습니다

28
00 : 01 : 56.645 -> 00 : 02 : 04.205
결국 J = 3V가 됩니다.

29
00 : 02 : 04.205 -> 00 : 02 : 07.235
구체적인 예로하면 a = 5

30
00 : 02 : 07.235 -> 00 : 02 : 10.040
b = 3, c = 2라고 하면
u = bc는 6입니다

31
00 : 02 : 10.040 -> 00 : 02 : 15.967
a + u는 11입니다
3배를 하면 J = 33입니다

32
00 : 02 : 15.967 -> 00 : 02 : 22.310
여러분이 이를 실제로 검증 할 수 
있다고 생각 합니다

33
00 : 02 : 22.310 -> 00 : 02 : 29.520
이 식은 3(5 + 3x2)의 수 입니다.

34
00 : 02 : 29.520 -> 00 : 02 : 30.865
이를 확장하면

35
00 : 02 : 30.865 -> 00 : 02 : 34.390
J의 값으로 33을 실제로 얻을 수 있습니다

36
00 : 02 : 34.390 -> 00 : 02 : 38.060
독특하고 특별한 출력 값을
최적화 하고자 하는 경우에는

37
00 : 02 : 38.060 -> 00 : 02 : 41.790
(이 경우는 J이지만)

38
00 : 02 : 41.790 -> 00 : 02 : 43.940
계산 그래프가

39
00 : 02 : 43.940 -> 00 : 02 : 46.215
유용하게 이용 됩니다.

40
00 : 02 : 46.215 -> 00 : 02 : 48.755
예를 들어 로지스틱 회귀의 경우에는

41
00 : 02 : 48.755 -> 00 : 02 : 53.260
J는 최소화 하려고하는 비용 함수가 될 것입니다.

42
00 : 02 : 53.260 -> 00 : 02 : 56.615
이 약간의 예에서 알 수있는 것은

43
00 : 02 : 56.615 -> 00 : 02 : 58.666
왼쪽에서 오른쪽으로의 경로를 통해

44
00 : 02 : 58.666 -> 00 : 03 : 01.075
J의 값을 계산할 수 있습니다

45
00 : 03 : 01.075 -> 00 : 03 : 05.993
이후 몇 슬라이드에서는
미분값을 계산 하기 위해

46
00 : 03 : 05.993 -> 00 : 03 : 10.010
오른쪽에서 왼쪽으로 이런 경로가

47
00 : 03 : 10.010 -> 00 : 03 : 14.380
파란색 화살표 대해
반대 방향으로 진행되고 있습니다

48
00 : 03 : 14.380 -> 00 : 03 : 17.205
이것은 미분을 계산하는데
가장 자연스러운 방법입니다

49
00 : 03 : 17.205 -> 00 : 03 : 20.015
정리합니다. 계산 그래프는

50
00 : 03 : 20.015 -> 00 : 03 : 24.250
계산을 왼쪽에서 오른쪽
파란색 화살표 방향으로 계산합니다

51
00 : 03 : 24.250 -> 00 : 03 : 26.510
다음 비디오에서는 반대 방향의 빨간색 화살표,

52
00 : 03 : 26.510 -> 00 : 03 : 31.710
즉 오른쪽에서 왼쪽으로의 미분값 계산을
어떻게 할 것인가를 살펴 보겠습니다

53
00 : 03 : 31.710 -> 00 : 03 : 33.000
다음 비디오로 넘어갑니다.